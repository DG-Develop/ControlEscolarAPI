// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ControlEscolarDBContext))]
    [Migration("20240525231533_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.MiembroEscolar", b =>
                {
                    b.Property<int>("IdMiembroEscolar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_miembro_escolar");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMiembroEscolar"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("apellidos");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("correo_electronico");

                    b.Property<bool>("Estatus")
                        .HasColumnType("bit")
                        .HasColumnName("estatus");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<int>("IdTipoPersonal")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_personal");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("NumeroControl")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasColumnName("numero_control");

                    b.HasKey("IdMiembroEscolar");

                    b.HasIndex("CorreoElectronico")
                        .IsUnique()
                        .HasDatabaseName("idx_correo_electronico");

                    b.HasIndex("IdTipoPersonal");

                    b.ToTable("MiembroEscolar", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.TipoPersonal", b =>
                {
                    b.Property<int>("IdTipoPersonal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_personal");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoPersonal"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<string>("IdentificadorDeControl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("")
                        .HasColumnName("identificador_de_control");

                    b.Property<decimal>("SueldoMaximo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("sueldo_maximo");

                    b.Property<decimal>("SueldoMinimo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("sueldo_minimo");

                    b.Property<bool>("TieneSueldo")
                        .HasColumnType("bit")
                        .HasColumnName("tiene_sueldo");

                    b.HasKey("IdTipoPersonal")
                        .HasName("PK_tipo_personal");

                    b.HasIndex("Descripcion")
                        .IsUnique()
                        .HasDatabaseName("idx_descripcion");

                    b.ToTable("TipoPersonal", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Alumno", b =>
                {
                    b.HasBaseType("Domain.Entities.MiembroEscolar");

                    b.Property<string>("Grado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("grado");

                    b.ToTable("Alumno", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Personal", b =>
                {
                    b.HasBaseType("Domain.Entities.MiembroEscolar");

                    b.Property<decimal>("Sueldo")
                        .HasColumnType("money")
                        .HasColumnName("sueldo");

                    b.ToTable("Personal", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MiembroEscolar", b =>
                {
                    b.HasOne("Domain.Entities.TipoPersonal", "TipoPersonal")
                        .WithMany("MiembrosEscolares")
                        .HasForeignKey("IdTipoPersonal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoPersonal");
                });

            modelBuilder.Entity("Domain.Entities.Alumno", b =>
                {
                    b.HasOne("Domain.Entities.MiembroEscolar", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Alumno", "IdMiembroEscolar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Personal", b =>
                {
                    b.HasOne("Domain.Entities.MiembroEscolar", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Personal", "IdMiembroEscolar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.TipoPersonal", b =>
                {
                    b.Navigation("MiembrosEscolares");
                });
#pragma warning restore 612, 618
        }
    }
}
